# Jobs #######################
---
apiVersion: v1
kind: Namespace
metadata:
  labels:
    kubernetes.io/metadata.name: jobs
  name: jobs
---
apiVersion: batch/v1
kind: Job
metadata:
  name: broken-job
  namespace: jobs
spec:
  template:
    spec:
      containers:
      - command:
        - sleep
        - "2"
        - "&&"
        - echo
        - hello world
        image: busybox:stable
        name: broken-job
        resources: {}
      restartPolicy: OnFailure
  backoffLimit: 5
  activeDeadlineSeconds: 1

# Multi-Containers #######################
---
apiVersion: v1
kind: Namespace
metadata:
  labels:
    kubernetes.io/metadata.name: multicontainers
  name: multicontainers
---
apiVersion: v1
kind: Pod
metadata:
  labels:
    run: multicontainer
  name: multicontainer
  namespace: multicontainers
spec:
  containers:
  - image: busybox:stable
    name: app
    volumeMounts:
      - name: app-shared
        mountPath: /app
    command: ["/bin/sh", "-c"]
    args: ["while true; do date > /app/output.log; sleep 1; done"]
  # - image: busybox:stable
  #   name: sidecar
  #   volumeMounts:
  #   - name: app-shared
  #     mountPath: /app
  #   command: ["/bin/sh", "-c"]
  #   args: ["while true; do cat /app/output.log; sleep 1; done"]
  dnsPolicy: ClusterFirst
  restartPolicy: Always
  volumes:
    - name: app-shared
      emptyDir: {}
status: {}
---
apiVersion: v1
kind: Pod
metadata:
  name: ambassador-test-webserver
  labels:
    app: ambassador-test
  namespace: multicontainers
spec:
  containers:
  - name: nginx
    image: nginx:stable
    ports:
    - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: ambassador-test-svc
  namespace: multicontainers
spec:
  selector:
    app: ambassador-test
  ports:
  - protocol: TCP
    port: 8081
    targetPort: 80
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: haproxy-config
  namespace: multicontainers
data:
  haproxy.cfg: |
    frontend ambassador
      bind *:8080
      default_backend ambassador_test_svc
    backend ambassador_test_svc
      server svc ambassador-test-svc:8081

---
apiVersion: v1
kind: Pod
metadata:
  name: ambassador-test
  namespace: multicontainers
spec:
  containers:
  - name: main
    image: radial/busyboxplus:curl
    command: ["sh", "-c", "while true; do curl localhost:8080; sleep 5; done"]
  # - name: ambassador
  #   image: haproxy:2.4
  #   volumeMounts:
  #   - name: config
  #     mountPath: /usr/local/etc/haproxy
  volumes:
  - name: config
    configMap:
      name: haproxy-config

# Init #######################
---
apiVersion: v1
kind: Namespace
metadata:
  labels:
    kubernetes.io/metadata.name: init
  name: init

# Volumes #######################
---
apiVersion: v1
kind: Namespace
metadata:
  labels:
    kubernetes.io/metadata.name: volumes-setup
  name: volumes-setup
---
apiVersion: v1
kind: Namespace
metadata:
  labels:
    kubernetes.io/metadata.name: volumes
  name: volumes
---
# Daemonset is used here to just add a file on each of the worker nodes for the hostPath question. Ideally this would be a "daemonset job" but such a resource doesn't exist
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: create-host-path-data
  namespace: volumes-setup
spec:
  selector:
    matchLabels:
      name: create-host-path-data
  template:
    metadata:
      labels:
        name: create-host-path-data
    spec:
      containers:
      - command: ["sh", "-c", "date > /app/data.log && while true; do sleep 1; done"]
        image: busybox:stable
        name: create-host-path-data
        volumeMounts:
        - name: host-data
          mountPath: /app/data.log
      volumes:
      - name: host-data
        hostPath:
          path: /etc/data.log
          type: FileOrCreate
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: hostpath-pv
spec:
  capacity:
    storage: 100Mi
  accessModes:
  - ReadWriteOnce
  storageClassName: slow
  hostPath:
    path: /etc/persistentVol
    type: DirectoryOrCreate
---
apiVersion: v1
kind: Namespace
metadata:
  labels:
    kubernetes.io/metadata.name: deployments
  name: deployments
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: rolling-deploy
  name: rolling-deploy
  namespace: deployments
spec:
  replicas: 5
  selector:
    matchLabels:
      app: rolling-deploy
  template:
    metadata:
      labels:
        app: rolling-deploy
    spec:
      containers:
      - image: nginx:1.22
        name: nginx
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: blue-config
  namespace: deployments
data:
  index.html: |
    this is the BLUE deployment
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: green-config
  namespace: deployments
data:
  index.html: |
    this is the GREEN deployment
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: main-config
  namespace: deployments
data:
  index.html: |
    this is the MAIN deployment
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: canary-config
  namespace: deployments
data:
  index.html: |
    this is the CANARY deployment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: blue-deploy
  namespace: deployments
spec:
  replicas: 1
  selector:
    matchLabels:
      app: bluegreen-deploy
      colour: blue
  template:
    metadata:
      labels:
        app: bluegreen-deploy
        colour: blue
    spec:
      containers:
      - name: nginx
        image: nginx:stable
        volumeMounts:
        - name: config
          mountPath: /usr/share/nginx/html
      volumes:
      - name: config
        configMap:
          name: blue-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: green-deploy
  namespace: deployments
spec:
  replicas: 1
  selector:
    matchLabels:
      app: bluegreen-deploy
      colour: green
  template:
    metadata:
      labels:
        app: bluegreen-deploy
        colour: green
    spec:
      containers:
      - name: nginx
        image: nginx:stable
        volumeMounts:
        - name: config
          mountPath: /usr/share/nginx/html
      volumes:
      - name: config
        configMap:
          name: green-config
---
apiVersion: v1
kind: Service
metadata:
  name: bluegreen-svc
  namespace: deployments
spec:
  selector:
    app: bluegreen-deploy
    colour: blue
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
  name: bluegreen-ingress
  namespace: deployments
spec:
  rules:
  - http:
      paths:
      - backend:
          service:
            name: bluegreen-svc
            port:
              number: 80
        path: /bluegreen
        pathType: Prefix

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: main-deploy
  namespace: deployments
spec:
  replicas: 3
  selector:
    matchLabels:
      app: canary-example
      environment: main
  template:
    metadata:
      labels:
        app: canary-example
        environment: main
    spec:
      containers:
      - name: nginx
        image: nginx:stable
        volumeMounts:
        - name: config
          mountPath: /usr/share/nginx/html
      volumes:
      - name: config
        configMap:
          name: main-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: canary-deploy
  namespace: deployments
spec:
  replicas: 3
  selector:
    matchLabels:
      app: canary-example
      environment: canary
  template:
    metadata:
      labels:
        app: canary-example
        environment: canary
    spec:
      containers:
      - name: nginx
        image: nginx:stable
        volumeMounts:
        - name: config
          mountPath: /usr/share/nginx/html
      volumes:
      - name: config
        configMap:
          name: canary-config
---
apiVersion: v1
kind: Service
metadata:
  name: canary-svc
  namespace: deployments
spec:
  selector:
    app: canary-example
    environment: main
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
  name: canary-ingress
  namespace: deployments
spec:
  rules:
  - http:
      paths:
      - backend:
          service:
            name: canary-svc
            port:
              number: 80
        path: /canary
        pathType: Prefix

